{% extends 'base.html.twig' %}

{% block title %}Business Contacts Map{% endblock %}

{% block body %}
    <div class="row">
        <div class="col-10">
            <h3 style="color: red">{% if subset == 'All' %}Business Contacts: All{% else %}{{ subset }}{% endif %}</h3>
        </div>
        <div class="col-2">
            <a class="btn btn-outline-info btn-sm" href="{{ path('business_contacts_index') }}">Return to List</a>
        </div>
    </div>
    {% include 'business_contacts/parts/map/subset_buttons.html.twig' %}
    <br>
    {% include 'business_contacts/parts/map/list_of_business_contacts.html.twig' %}
{#    {% include 'business_contacts/parts/map/max_min_average_latitude_and_longitude.html.twig' %}#}
    <hr>
    <div class="row">
        <div class="col-12">
            <div id="map" style="width: 100%; height: 850px;"
                 data-locations='[
            {% for business_contact in business_contacts %}
            {% if business_contact.locationLatitude != 0 %}

            {
                "lat": {{ business_contact.locationLatitude }},
                "lng": {{ business_contact.locationLongitude }},
                "name": "{{ business_contact.company | e('js') }}",
                "icon": "{{ subset == 'All' and business_contact.businessType.mapIcon.iconFile is not null
                 ? asset('/administration/ATSSharedFiles/BusinessContactsMapIcons/' ~ business_contact.businessType.mapIcon.iconFile)
                 : asset('/administration/ATSSharedFiles/BusinessContactsMapIcons/map_marker.png') }}"
            }{% if not loop.last %}, {% endif %}
{% endif %}
        {% endfor %}
     ]'>
            </div>
            <br><br><br>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const mapElement = document.getElementById('map');
            const locations = JSON.parse(mapElement.getAttribute('data-locations'));

            // Ensure we have valid locations and average coordinates
            if (!locations || locations.length === 0) {
                console.error('No locations provided for the map.');
                return;
            }

            // Create a LatLngBounds object to hold all marker positions
            const bounds = new google.maps.LatLngBounds();

            // Initialize the map
            const map = new google.maps.Map(mapElement, {
                center: {
                    lat: {{ latitude_average|default(0) }},
                    lng: {{ longitude_average|default(0) }}
                },
                zoom: 12, // Default zoom, can be adjusted
            });

            // Place markers and extend bounds to include all markers
            locations.forEach(location => {
                const marker = new google.maps.Marker({
                    position: {lat: location.lat, lng: location.lng},
                    map: map,
                    title: location.name,
                    icon: {
                        url: location.icon,  // Use the icon URL
                        scaledSize: new google.maps.Size(40, 40), // Customize marker size
                    },
                });

                // Extend the bounds to include this marker
                bounds.extend(new google.maps.LatLng(location.lat, location.lng));

                const infoWindow = new google.maps.InfoWindow({
                    content: `<h3>${location.name}</h3>`,
                });

                marker.addListener('click', () => {
                    infoWindow.open(map, marker);
                });
            });

            // After adding all markers, fit the bounds to the map
            map.fitBounds(bounds);

            // Optionally, set zoom level constraints if needed
            const minZoom = 5; // Set minimum zoom level
            const maxZoom = 15; // Set maximum zoom level
            google.maps.event.addListenerOnce(map, 'bounds_changed', function () {
                let zoom = map.getZoom();
                if (zoom < minZoom) {
                    map.setZoom(minZoom);
                } else if (zoom > maxZoom) {
                    map.setZoom(maxZoom);
                }
            });
        });
    </script>
{% endblock %}
